/*
 * Ejemplo desarrollado por Erick Navarro
 * Blog: e-navarro.blogspot.com
 * Septiembre - 2015
 */

package analizadores; 

import arbol.Nodo;
import java_cup.runtime.*;

parser code 
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 


terminal String PTCOMA,PARIZQ,PARDER,CORIZQ,CORDER;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String ENTERO;
terminal String DECIMAL;
terminal String UMENOS;
terminal String REVALUAR;

non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal Nodo expresion;

precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence right UMENOS; 

start with ini; 

ini::=instrucciones;

instrucciones ::= 
   instruccion instrucciones
 | instruccion
 | error instrucciones
; 

instruccion ::= 
   REVALUAR CORIZQ expresion:arbol CORDER PTCOMA{:
        System.out.println("El valor de la expresión es: "+arbol.getValor());
        System.out.println("Para esta expresión se ha creado la imagen: "+arbol.graficar());
   :}
;

expresion  ::= 
    MENOS expresion:a                      {:RESULT=new Nodo(a,Nodo.Tipo.NEGATIVO);:}%prec UMENOS     
 |  expresion:a MAS        expresion:b     {:RESULT=new Nodo(a,b,Nodo.Tipo.SUMA);:}
 |  expresion:a MENOS      expresion:b     {:RESULT=new Nodo(a,b,Nodo.Tipo.RESTA);:}
 |  expresion:a POR        expresion:b     {:RESULT=new Nodo(a,b,Nodo.Tipo.MULTIPLICACION);:}
 |  expresion:a DIVIDIDO   expresion:b     {:RESULT=new Nodo(a,b,Nodo.Tipo.DIVISION);:}
 |  ENTERO:a                               {:RESULT=new Nodo(new Double(a));:}
 |  DECIMAL:a                              {:RESULT=new Nodo(new Double(a));:}
 |  PARIZQ expresion:a PARDER              {:RESULT=a;:}
;